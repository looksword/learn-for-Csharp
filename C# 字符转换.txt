
public static byte[] GetAsciiBytes(params byte[] numbers)
{
	string asciiStr = "";
	foreach (byte b in numbers)
	{
		asciiStr += b.ToString("X2");
	}
	return Encoding.ASCII.GetBytes(asciiStr);
}





public static byte[] GetAsciiBytes(params ushort[] numbers)
{
	string asciiStr = "";
	foreach (ushort u in numbers)
	{
		asciiStr += u.ToString("X4");
	}
	return Encoding.ASCII.GetBytes(asciiStr);
}





public static byte[] HexToBytes(byte[] hex)
{
	if (hex == null)
		throw new ArgumentNullException("hex");

	if (hex.Length % 2 != 0)
		throw new FormatException(Resources.HexCharacterCountNotEven);

	byte[] bytes = new byte[hex.Length / 2];

	for (int i = 0; i < bytes.Length; i++)
		bytes[i] = Convert.ToByte("" + (char)hex[i * 2] + (char)hex[i * 2 + 1], 16);

	return bytes;
}



字节顺序 2143


ushort[] Dewdata = Modbus.ReadHoldingRegisters(0x01, 0x00, 6);
byte[] bytes = new byte[4];
bytes[2] = (byte)(Dewdata[1] & 0xFF);//低位
bytes[3] = (byte)(Dewdata[1] >> 8);//高位
bytes[0] = (byte)(Dewdata[0] & 0xFF);
bytes[1] = (byte)(Dewdata[0] >> 8);
float tem = BitConverter.ToSingle(bytes, 0);





bool[]  ->  byte[]

bool[] values;
byte[] newvalues = values.Select(m => m ? (byte)0x01 : (byte)0x00).ToArray()





/// <summary>
/// 获取ushort的第bitIndex位bool
/// </summary>
/// <param name="source"></param>
/// <param name="bitIndex">从0开始</param>
/// <returns></returns>
private bool GetBitOfUshort(ushort source, int bitIndex)
{
	ushort mask = 1;
	mask = (ushort)(mask << bitIndex);
	source = (ushort)(source & mask);
	return ((source == 0) ? false : true);
}

/// <summary>
/// 修改ushort的第bitIndex位bool
/// </summary>
/// <param name="source"></param>
/// <param name="bitIndex">从0开始</param>
/// <param name="value"></param>
/// <returns></returns>
private ushort SetBitOfUshort(ushort source, int bitIndex, bool value)
{
	ushort mask = 1;
	mask = (ushort)(mask << bitIndex);
	if (value)
	{
		source = (ushort)(source | mask);
	}
	else
	{
		mask = (ushort)(~mask);//取反
		source = (ushort)(source & mask);
	}
	return source;
}

