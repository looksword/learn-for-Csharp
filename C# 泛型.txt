

------------------------------------------------------------------------------------------
通过default关键字，将null赋予引用类型，将0赋予值类型
public T GetDocument()
{
	T doc = default(T);
	lock(this)
	{
		doc = documentQueue.Dequeue();
	}
	return doc;
}


------------------------------------------------------------------------------------------
如果泛型类需要调用泛型类型中的方法，就必须添加约束where
public interface IDocument
{
	string Title{get;set;}
	string Content{get;set;}
}
public class Document:IDocument
{
	public Document()
	{
	}
	public Document(string title,string content)
	{
		this.Title = title;
		this.Content = content;
	}
	public string Title{get;set;}
	public string Content{get;set;}
}
public class DocumentManager<TDocument>where TDocument:IDocument
{
	private readonly Queue<TDocument> documentQueue = new Queue<TDocument>();
	public TDocument GetDocument()
    {
		TDocument doc = default(TDocument);
		lock (this)
		{
			doc = documentQueue.Dequeue();
		}
		return doc;
    }
	public void AddDocument(TDocument doc)
    {
	lock (this)
	{
		documentQueue.Enqueue(doc);
	}
    }
	public void DisplayAllDocuments()
    {
		foreach (TDocument doc in documentQueue)
		{
			Console.WriteLine(doc.Title);
		}
    }
}
------------------------------------------------------------------------------------------
where T:struct		对于结构约束,类型T必须是值类型
where T:class		类约束指定类型T必须是引用类型
where T:IFoo		指定类型T必须实现接口IFoo
where T:Foo			指定类型T必须派生自基类Foo
where T:new()		这是一个构造函数约束，指定类型T必须有一个默认构造函数
where T1:T2			这个约束也可以指定，类型T1派生自泛型T2。该约束也称裸类型约束

使用泛型类型还可以合并多个约束。
where T:IFoo,new()
//约束和MyClass<T>声明指定，类型T必须实现IFoo接口，且必须有一个默认构造函数。
------------------------------------------------------------------------------------------
在C#中，where子句的一个重要限制是，不能定义必须由泛型类型实现的运算符。
运算符不能在接口中定义。
在where子句中，只能定义基类、接口和默认构造函数。
------------------------------------------------------------------------------------------
泛型类型可以实现泛型接口，也可以派生自一个类。泛型类可以派生自泛型基类
------------------------------------------------------------------------------------------
泛型类的静态成员只能在类的一个实例中共享。
public class StaticDemo<T>
{
	public static int x;
}

StaticDemo<string>.x=4;
StaticDemo<int>.x=5;
Console.WriteLine(StaticDemo<string>.x);// writes 4
------------------------------------------------------------------------------------------
协变和抗变(对参数和返回值的类型进行转换)

如果泛型类型用out关键字标注，泛型接口就是协变的。
这就意味着返回类型只能是T。
接口IIndex与类型T是协变的，并从一个只读索引器中返回这个类型
public interface IIndex<out T>
{
	T this[int index]{get;}
	int Count{get;}
}

如果泛型类型用in关键字标注，泛型接口就是抗变的。
这样，接口只能把泛型类型T用作其方法的输入
public interface IDisplay<in T>
{
	void Show(T item);
}
------------------------------------------------------------------------------------------
泛型结构	Nullable<T>
public struct Nullable<T>where T:struct
{//Nullable<T>的一个简化版本
	public Nullable(T value)
	{
		this.hasValue = true;
		this.value = value;
	}
	private bool hasValue;
	public bool HasValue{get{return hasValue;}}
	private T value;
	public T Value
	{
		get
		{
			if(!hasValue)
			{
				throw new InvalidOperationException("no value");
			}
		}
	}
	//把Nullable<T>类型强制转换为T类型的操作符重载是显式定义的，
	//因为当hasValue为false时，它会抛出一个异常
	public static explicit operator T(Nullable<T> value){return value.Value}
	//强制转换为Nullable<T>类型的操作符重载定义为隐式的，因为它总是能成功地转换
	public static implicit operator Nullable<T>(T value){return new Nullable<T>(value);}
	public override string ToString()
	{
		if(!HasValue)
		{
			return String.Empty;
		}
		return this.value.ToString();
	}
}
------------------------------------------------------------------------------------------
泛型方法
void Swap<T>(ref T x,ref T y)
{
	T temp;
	temp = x;
	x = y;
	y = temp;
}
C#编译器会通过调用Swap()方法来获取参数的类型，所以不需要把泛型类型赋予方法调用。
------------------------------------------------------------------------------------------
1.带约束的泛型方法
2.带委托的泛型方法
------------------------------------------------------------------------------------------
泛型方法可以重载，为特定的类型定义规范。
在编译期间，会使用最佳匹配。
------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------