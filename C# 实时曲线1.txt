
public partial class Form1 : Form
{
	public Form1()
	{
		InitializeComponent();
	}

	GraphEdit graphEdit;
	Color boardColor = Color.FromArgb(17, 81, 138);//指定绘制图的背景色  
	Thread toUpdate;                               //刷新线程
	private void LoadingUI()
	{
		graphEdit = new GraphEdit(640, 350, boardColor);
		graphEdit.HorizontalMargin = 50;                                   //横水平边距
		graphEdit.VerticalMargin = 80;                                     //竖垂直边距
		graphEdit.AreasColor = Color.FromArgb(100, 0, 0, 0);         //画图区域颜色
		graphEdit.GraphColor = Color.FromArgb(255, 110, 176);        //曲线面积颜色
		graphEdit.AxisColor = Color.FromArgb(255, 255, 255);         //坐标轴颜色
		graphEdit.ScaleColor = Color.FromArgb(20, 255, 255, 255);          //刻度线颜色
		graphEdit.XScaleCount = 24;          //X轴刻度线数量
		graphEdit.YScaleCount = 10;          //Y轴刻度线数量
		toUpdate = new Thread(new ThreadStart(Run));
		toUpdate.Start();
	}

	private void Run()
	{
		while (true)
		{
			Image image = graphEdit.GetCurrentGraph(this.GetBaseData(), XRange, YRange, false);  //如果是面积曲线图将最后一个参数设为true
			Graphics g = this.CreateGraphics();  //指定使用那个控件来接受曲线图

			g.DrawImage(image, 10, 10);//绘画位置
			g.Dispose();
			Thread.Sleep(500);                 //每2秒钟刷新一次  
		}
	}

	float XRange = 1440;   //X轴最大范围（0-1440）
	float YRange = 500;    //Y轴最大范围（0-500）

	/// <summary>
	/// 得到（数据库）数据
	/// </summary>
	/// <returns></returns>
	private List<Point> GetBaseData()
	{
		Random r = new Random();
		List<Point> result = new List<Point>();  //数据
		for (int i = 0; i < XRange - 200; i += 30)
		{
			Point p;
			if (i < 100)
				p = new Point(i, r.Next(100, 200));
			else
				p = new Point(i, r.Next(50, 220));
			result.Add(p);
		}
		return result;
	}

	private void Form1_Load(object sender, EventArgs e)
	{
		LoadingUI();
	}

	private void Form1_FormClosing(object sender, FormClosingEventArgs e)
	{
		try
		{
			toUpdate.Abort();
		}
		catch (Exception)
		{
			Environment.Exit(0);
		}
	}
}

public class DrawingCurve
{
	private Graphics graphics; //Graphics 类提供将对象绘制到显示设备的方法
	private Bitmap bitmap; //位图对象
	private int timeLine = 60;//60s
	private int canvasWidth = 600;//画布长度
	private int sliceCount = 0;//刻度分段个数 = timeLine
	private int xSlice = 10;//X轴刻度分端宽度
	private int xSliceHeight = 10;//X轴刻度高度
	private float tension = 0.5f; //张力系数
	private bool showX = true;
	private bool showY = true;
	private bool showZ = true;

	//Queue<PointF> que = new Queue<PointF>();//曲线fifo
	/// <summary>
	/// 构造函数
	/// </summary>
	public DrawingCurve() {
		this.xSlice = this.canvasWidth / timeLine;
	}

	/// <summary>
	/// 绘制画布
	/// </summary>
	/// <param name="width"></param>
	/// <param name="height"></param>
	/// <param name="points"></param>
	/// <returns></returns>
	public Bitmap DrawCanvas(int width, int height,List<float> points)
	{
		if (bitmap != null)
		{
			bitmap.Dispose();
			bitmap = null;
		}

		bitmap = new Bitmap(width, height);
		graphics = Graphics.FromImage(bitmap);
		graphics.FillRectangle(Brushes.Black, new Rectangle(0, 0, width, height));
		graphics.Transform = new Matrix(1, 0, 0, -1, 0, 0);//Y轴向上为正，X向右为
		graphics.TranslateTransform(0, height / 2, MatrixOrder.Append);
		
		Pen pen = new Pen(Color.Red, 1);
		pen.DashStyle = DashStyle.Custom;
		pen.DashPattern = new float[] { 2, 2 };
		graphics.DrawLine(pen, new Point(0, height / 4), new Point(width, height / 4));
		graphics.DrawLine(pen, new Point(0, height / -4), new Point(width, height / -4));
		graphics.DrawLine(new Pen(Color.GreenYellow,1), new Point(0, 0), new Point(width, 0));
		graphics.DrawString("0", new Font("Vendara",10), Brushes.White, new Point(0, -15));
		graphics.DrawString("+", new Font("Vendara", 10), Brushes.White, new Point(0, height / 4));
		graphics.DrawString("-", new Font("Vendara", 10), Brushes.White, new Point(0, height / -4-15));
		graphics.Transform = new Matrix(1, 0, 0, 1, 0, 0);//Y轴向上为正，X向右为
		graphics.TranslateTransform(0, height / 2, MatrixOrder.Append);
		graphics.DrawString("-59s", new Font("Vendara", 8), Brushes.White, new Point(0, height/2-15));
		graphics.DrawString("0s", new Font("Vendara", 8), Brushes.White, new Point(width-20, height / 2 - 15));
		for (int i = 0; i < timeLine; i++)
		{
			int scale = i * xSlice;
			graphics.DrawLine(new Pen(new SolidBrush(Color.Blue)), 0 + scale, 0 + xSliceHeight * 0.1f, 0 + scale, 0 - xSliceHeight * 0.1f);
		}

		graphics.Transform = new Matrix(-1, 0, 0, -1, 0, 0);//Y轴向上为正，X向右为
		graphics.TranslateTransform(width, height / 2, MatrixOrder.Append);

		if (showX) DrawX(graphics, points);
		if (showY) DrawY(graphics, points);
		if (showZ) DrawZ(graphics, points);
		graphics.Dispose();
		return bitmap;
	}

	#region 绘制曲线
	private void DrawX(Graphics graphics, List<float> points)
	{
		Pen CurvePen = new Pen(Color.Cyan, 2);
		PointF[] CurvePointF = new PointF[points.Count];
		float keys = 0;
		float values = 0;
		for (int i = 0; i < points.Count; i++)
		{
			keys = xSlice * i;
			values = 10 * (points[i] / 10);
			CurvePointF[i] = new PointF(keys, values);
		}
		graphics.DrawCurve(CurvePen, CurvePointF, this.tension);
	}

	private void DrawY(Graphics graphics, List<float> points)
	{
		Pen CurvePen = new Pen(Color.Purple, 2);
		PointF[] CurvePointF = new PointF[points.Count];
		float keys = 0;
		float values = 0;
		for (int i = 0; i < points.Count; i++)
		{
			keys = xSlice * i;
			values = 10 * (points[i] / 10);
			CurvePointF[i] = new PointF(keys, values);
		}
		graphics.DrawCurve(CurvePen, CurvePointF, this.tension);
	}

	private void DrawZ(Graphics graphics, List<float> points)
	{
		Pen CurvePen = new Pen(Color.OrangeRed, 2);
		PointF[] CurvePointF = new PointF[points.Count];
		float keys = 0;
		float values = 0;
		for (int i = 0; i < points.Count; i++)
		{
			keys = xSlice * i;
			values = 10 * (points[i] / 10);
			CurvePointF[i] = new PointF(keys, values);
		}
		graphics.DrawCurve(CurvePen, CurvePointF, this.tension);
	}

	/// <summary>
	/// 曲线开关
	/// </summary>
	/// <param name="_xyz"></param>
	/// <param name="show"></param>
	public void HideCurve(string _xyz,bool show) {
		switch (_xyz) { 
			case "x":
				showX = show;
				break;
			case "y":
				showY = show;
				break;
			case "z":
				showZ = show;
				break;
			default:
				break;
		}
	}

	#endregion
}